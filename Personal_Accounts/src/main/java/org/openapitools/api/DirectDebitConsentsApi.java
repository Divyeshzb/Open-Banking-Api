/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ApiGatewayErrorResponse;
import org.openapitools.model.DirectDebitConsentRequestData;
import org.openapitools.model.DirectDebitConsentsResponse;
import org.openapitools.model.ErrorInfo;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-04T10:32:56.573489+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "Real-time Direct Debit Consent Setup", description = "the Real-time Direct Debit Consent Setup API")
public interface DirectDebitConsentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /direct-debit-consents/{consentId}
     *
     * @param consentId Consent Id (required)
     * @param authorization Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes. (required)
     * @param xFapiAuthDate Customer last logged-in time with the TSP application. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC (optional)
     * @param xFapiCustomerIpAddress Customer IP address when making a request with the TSP application. (optional)
     * @param xFapiInteractionId Unique correlation ID to playback response for each request. (optional)
     * @param acceptLanguage Standard HTTP header to indicate the natural language set used in the response. (optional)
     * @return No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Unauthorised (status code 401)
     *         or Forbidden (status code 403)
     *         or Method Not Allowed (status code 405)
     *         or Not Acceptable (status code 406)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     *         or Gateway Timeout (status code 504)
     */
    @Operation(
        operationId = "consentDeletion",
        tags = { "Real-time Direct Debit Consent Setup" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorised", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not Allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))
            }),
            @ApiResponse(responseCode = "406", description = "Not Acceptable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too Many Requests", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiGatewayErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiGatewayErrorResponse.class))
            }),
            @ApiResponse(responseCode = "504", description = "Gateway Timeout", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiGatewayErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuthSession")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/direct-debit-consents/{consentId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> consentDeletion(
        @Parameter(name = "consentId", description = "Consent Id", required = true, in = ParameterIn.PATH) @PathVariable("consentId") String consentId,
        @NotNull @Parameter(name = "Authorization", description = "Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true) String authorization,
        @Parameter(name = "x-fapi-auth-date", description = "Customer last logged-in time with the TSP application. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC", in = ParameterIn.HEADER) @RequestHeader(value = "x-fapi-auth-date", required = false) String xFapiAuthDate,
        @Parameter(name = "x-fapi-customer-ip-address", description = "Customer IP address when making a request with the TSP application.", in = ParameterIn.HEADER) @RequestHeader(value = "x-fapi-customer-ip-address", required = false) String xFapiCustomerIpAddress,
        @Parameter(name = "x-fapi-interaction-id", description = "Unique correlation ID to playback response for each request.", in = ParameterIn.HEADER) @RequestHeader(value = "x-fapi-interaction-id", required = false) String xFapiInteractionId,
        @Parameter(name = "Accept-Language", description = "Standard HTTP header to indicate the natural language set used in the response.", in = ParameterIn.HEADER) @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"errors\" : [ { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" }, { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"errors\" : [ { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" }, { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"errors\" : [ { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" }, { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"errors\" : [ { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" }, { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /direct-debit-consents/{consentId}
     *
     * @param consentId Consent Id (required)
     * @param authorization Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes. (required)
     * @param xFapiAuthDate Customer last logged-in time with the TSP application. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC (optional)
     * @param xFapiCustomerIpAddress Customer IP address when making a request with the TSP application. (optional)
     * @param xFapiInteractionId Unique correlation ID to playback response for each request. (optional)
     * @param acceptLanguage Standard HTTP header to indicate the natural language set used in the response. (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorised (status code 401)
     *         or Forbidden (status code 403)
     *         or Method Not Allowed (status code 405)
     *         or Not Acceptable (status code 406)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     *         or Gateway Timeout (status code 504)
     */
    @Operation(
        operationId = "consentRetrival",
        tags = { "Real-time Direct Debit Consent Setup" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DirectDebitConsentsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorised", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not Allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))
            }),
            @ApiResponse(responseCode = "406", description = "Not Acceptable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too Many Requests", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiGatewayErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiGatewayErrorResponse.class))
            }),
            @ApiResponse(responseCode = "504", description = "Gateway Timeout", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiGatewayErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuthSession")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/direct-debit-consents/{consentId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DirectDebitConsentsResponse> consentRetrival(
        @Parameter(name = "consentId", description = "Consent Id", required = true, in = ParameterIn.PATH) @PathVariable("consentId") String consentId,
        @NotNull @Parameter(name = "Authorization", description = "Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true) String authorization,
        @Parameter(name = "x-fapi-auth-date", description = "Customer last logged-in time with the TSP application. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC", in = ParameterIn.HEADER) @RequestHeader(value = "x-fapi-auth-date", required = false) String xFapiAuthDate,
        @Parameter(name = "x-fapi-customer-ip-address", description = "Customer IP address when making a request with the TSP application.", in = ParameterIn.HEADER) @RequestHeader(value = "x-fapi-customer-ip-address", required = false) String xFapiCustomerIpAddress,
        @Parameter(name = "x-fapi-interaction-id", description = "Unique correlation ID to playback response for each request.", in = ParameterIn.HEADER) @RequestHeader(value = "x-fapi-interaction-id", required = false) String xFapiInteractionId,
        @Parameter(name = "Accept-Language", description = "Standard HTTP header to indicate the natural language set used in the response.", in = ParameterIn.HEADER) @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"consentId\" : \"consentId\", \"permissions\" : [ null, null ], \"statusUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\", \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"next\" : \"https://openapi-generator.tech\", \"prev\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"errors\" : [ { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" }, { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"errors\" : [ { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" }, { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"errors\" : [ { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" }, { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"errors\" : [ { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" }, { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /direct-debit-consents
     *
     * @param authorization Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes. (required)
     * @param contentType Standard HTTP header indicating the format of the payload provided in the request. Content-type could be set to application/json. (required)
     * @param xFapiAuthDate Customer last logged-in time with the TSP application. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC (optional)
     * @param xFapiCustomerIpAddress Customer IP address when making a request with the TSP application. (optional)
     * @param xFapiInteractionId Unique correlation ID to playback response for each request. (optional)
     * @param acceptLanguage Standard HTTP header to indicate the natural language set used in the response. (optional)
     * @param directDebitConsentRequestData  (optional)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorised (status code 401)
     *         or Forbidden (status code 403)
     *         or Method Not Allowed (status code 405)
     *         or Not Acceptable (status code 406)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     *         or Gateway Timeout (status code 504)
     */
    @Operation(
        operationId = "consentSetup",
        tags = { "Real-time Direct Debit Consent Setup" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DirectDebitConsentsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorised", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "405", description = "Method Not Allowed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))
            }),
            @ApiResponse(responseCode = "406", description = "Not Acceptable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))
            }),
            @ApiResponse(responseCode = "415", description = "Unsupported Media Type", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too Many Requests", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiGatewayErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiGatewayErrorResponse.class))
            }),
            @ApiResponse(responseCode = "504", description = "Gateway Timeout", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiGatewayErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuthSession")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/direct-debit-consents",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DirectDebitConsentsResponse> consentSetup(
        @NotNull @Parameter(name = "Authorization", description = "Standard HTTP header that allows credentials to be provided to the authorisation/resource server. Based on the OAuth 2.0/OIDC framework, this consists of basic or bearer authentication schemes.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = true) String authorization,
        @NotNull @Parameter(name = "Content-Type", description = "Standard HTTP header indicating the format of the payload provided in the request. Content-type could be set to application/json.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Content-Type", required = true) String contentType,
        @Parameter(name = "x-fapi-auth-date", description = "Customer last logged-in time with the TSP application. All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below: Sun, 10 Sep 2017 19:43:31 UTC", in = ParameterIn.HEADER) @RequestHeader(value = "x-fapi-auth-date", required = false) String xFapiAuthDate,
        @Parameter(name = "x-fapi-customer-ip-address", description = "Customer IP address when making a request with the TSP application.", in = ParameterIn.HEADER) @RequestHeader(value = "x-fapi-customer-ip-address", required = false) String xFapiCustomerIpAddress,
        @Parameter(name = "x-fapi-interaction-id", description = "Unique correlation ID to playback response for each request.", in = ParameterIn.HEADER) @RequestHeader(value = "x-fapi-interaction-id", required = false) String xFapiInteractionId,
        @Parameter(name = "Accept-Language", description = "Standard HTTP header to indicate the natural language set used in the response.", in = ParameterIn.HEADER) @RequestHeader(value = "Accept-Language", required = false) String acceptLanguage,
        @Parameter(name = "DirectDebitConsentRequestData", description = "") @Valid @RequestBody(required = false) DirectDebitConsentRequestData directDebitConsentRequestData
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"consentId\" : \"consentId\", \"permissions\" : [ null, null ], \"statusUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\", \"creationDate\" : \"2000-01-23T04:56:07.000+00:00\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"links\" : { \"next\" : \"https://openapi-generator.tech\", \"prev\" : \"https://openapi-generator.tech\", \"self\" : \"https://openapi-generator.tech\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"errors\" : [ { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" }, { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"errors\" : [ { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" }, { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"errors\" : [ { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" }, { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"errors\" : [ { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" }, { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"errors\" : [ { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" }, { \"extendedDetails\" : { \"path\" : \"path\" }, \"code\" : \"code\", \"causes\" : \"causes\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
