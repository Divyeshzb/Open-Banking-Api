package org.openapitools.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import org.openapitools.model.CashAccount;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * Object to hold details required to fetch direct debit authorisation status
 */

@Schema(name = "directDebitInstructionStatusRequest", description = "Object to hold details required to fetch direct debit authorisation status")
@JsonTypeName("directDebitInstructionStatusRequest")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-04T10:32:56.573489+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class DirectDebitInstructionStatusRequest {

  private String merchantInstructionIdentification;

  private CashAccount creditorAccount;

  public DirectDebitInstructionStatusRequest() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public DirectDebitInstructionStatusRequest(String merchantInstructionIdentification, CashAccount creditorAccount) {
    this.merchantInstructionIdentification = merchantInstructionIdentification;
    this.creditorAccount = creditorAccount;
  }

  public DirectDebitInstructionStatusRequest merchantInstructionIdentification(String merchantInstructionIdentification) {
    this.merchantInstructionIdentification = merchantInstructionIdentification;
    return this;
  }

  /**
   * Merchant Request Reference No. Unique instruction id generated by merchant.
   * @return merchantInstructionIdentification
  */
  @NotNull @Size(min = 1, max = 30) 
  @Schema(name = "merchantInstructionIdentification", description = "Merchant Request Reference No. Unique instruction id generated by merchant.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("merchantInstructionIdentification")
  public String getMerchantInstructionIdentification() {
    return merchantInstructionIdentification;
  }

  public void setMerchantInstructionIdentification(String merchantInstructionIdentification) {
    this.merchantInstructionIdentification = merchantInstructionIdentification;
  }

  public DirectDebitInstructionStatusRequest creditorAccount(CashAccount creditorAccount) {
    this.creditorAccount = creditorAccount;
    return this;
  }

  /**
   * Get creditorAccount
   * @return creditorAccount
  */
  @NotNull @Valid 
  @Schema(name = "creditorAccount", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("creditorAccount")
  public CashAccount getCreditorAccount() {
    return creditorAccount;
  }

  public void setCreditorAccount(CashAccount creditorAccount) {
    this.creditorAccount = creditorAccount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectDebitInstructionStatusRequest directDebitInstructionStatusRequest = (DirectDebitInstructionStatusRequest) o;
    return Objects.equals(this.merchantInstructionIdentification, directDebitInstructionStatusRequest.merchantInstructionIdentification) &&
        Objects.equals(this.creditorAccount, directDebitInstructionStatusRequest.creditorAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantInstructionIdentification, creditorAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectDebitInstructionStatusRequest {\n");
    sb.append("    merchantInstructionIdentification: ").append(toIndentedString(merchantInstructionIdentification)).append("\n");
    sb.append("    creditorAccount: ").append(toIndentedString(creditorAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

