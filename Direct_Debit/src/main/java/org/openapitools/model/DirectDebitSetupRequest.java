package org.openapitools.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.model.CashAccount;
import org.openapitools.model.Occurrences;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * Account summary for the customer, could be language specific
 */

@Schema(name = "directDebitSetupRequest", description = "Account summary for the customer, could be language specific")
@JsonTypeName("directDebitSetupRequest")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-04T10:34:18.316995+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class DirectDebitSetupRequest {

  private String merchantRequestIdentification;

  private String creditorReference;

  private String ultimateDebtorName;

  private String debtorName;

  private CashAccount debtorAccount;

  private String creditorName;

  private CashAccount creditorAccount;

  private String debtorPrivateIdentification;

  /**
   * Private ID type.
   */
  public enum DebtorPrivateIdentificationSchemeNameEnum {
    CCPT("CCPT"),
    
    NIDN("NIDN"),
    
    COID("COID"),
    
    CINC("CINC"),
    
    OTHR("OTHR");

    private String value;

    DebtorPrivateIdentificationSchemeNameEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DebtorPrivateIdentificationSchemeNameEnum fromValue(String value) {
      for (DebtorPrivateIdentificationSchemeNameEnum b : DebtorPrivateIdentificationSchemeNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private DebtorPrivateIdentificationSchemeNameEnum debtorPrivateIdentificationSchemeName;

  private String debtorMobileNumber;

  private String maximumAmountCurrency;

  private String maximumAmount;

  private Occurrences occurrences;

  private Boolean otpHoldIndicator;

  /**
   * User preferred language. This language will be used in SMS for communication
   */
  public enum SmsLanguageCodeEnum {
    ENG("eng"),
    
    ZH_S("zh-s"),
    
    ZH_T("zh-t");

    private String value;

    SmsLanguageCodeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SmsLanguageCodeEnum fromValue(String value) {
      for (SmsLanguageCodeEnum b : SmsLanguageCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private SmsLanguageCodeEnum smsLanguageCode;

  public DirectDebitSetupRequest() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public DirectDebitSetupRequest(String merchantRequestIdentification, String creditorReference, String debtorName, CashAccount debtorAccount, String creditorName, CashAccount creditorAccount, String debtorPrivateIdentification, DebtorPrivateIdentificationSchemeNameEnum debtorPrivateIdentificationSchemeName, String maximumAmountCurrency, String maximumAmount, Occurrences occurrences) {
    this.merchantRequestIdentification = merchantRequestIdentification;
    this.creditorReference = creditorReference;
    this.debtorName = debtorName;
    this.debtorAccount = debtorAccount;
    this.creditorName = creditorName;
    this.creditorAccount = creditorAccount;
    this.debtorPrivateIdentification = debtorPrivateIdentification;
    this.debtorPrivateIdentificationSchemeName = debtorPrivateIdentificationSchemeName;
    this.maximumAmountCurrency = maximumAmountCurrency;
    this.maximumAmount = maximumAmount;
    this.occurrences = occurrences;
  }

  public DirectDebitSetupRequest merchantRequestIdentification(String merchantRequestIdentification) {
    this.merchantRequestIdentification = merchantRequestIdentification;
    return this;
  }

  /**
   * Merchant Registration ID.Unique ID generated by merchant for every registration user journey.Fraud monitoring supports length up to 30.
   * @return merchantRequestIdentification
  */
  @NotNull @Size(min = 1, max = 30) 
  @Schema(name = "merchantRequestIdentification", description = "Merchant Registration ID.Unique ID generated by merchant for every registration user journey.Fraud monitoring supports length up to 30.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("merchantRequestIdentification")
  public String getMerchantRequestIdentification() {
    return merchantRequestIdentification;
  }

  public void setMerchantRequestIdentification(String merchantRequestIdentification) {
    this.merchantRequestIdentification = merchantRequestIdentification;
  }

  public DirectDebitSetupRequest creditorReference(String creditorReference) {
    this.creditorReference = creditorReference;
    return this;
  }

  /**
   * Creditor reference of the DDA. This CreditorReference will be sent to Payer Bank through FPS for record.
   * @return creditorReference
  */
  @NotNull @Size(min = 1, max = 35) 
  @Schema(name = "creditorReference", description = "Creditor reference of the DDA. This CreditorReference will be sent to Payer Bank through FPS for record.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("creditorReference")
  public String getCreditorReference() {
    return creditorReference;
  }

  public void setCreditorReference(String creditorReference) {
    this.creditorReference = creditorReference;
  }

  public DirectDebitSetupRequest ultimateDebtorName(String ultimateDebtorName) {
    this.ultimateDebtorName = ultimateDebtorName;
    return this;
  }

  /**
   * The ultimate debtor's name.
   * @return ultimateDebtorName
  */
  @Size(max = 140) 
  @Schema(name = "ultimateDebtorName", description = "The ultimate debtor's name.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("ultimateDebtorName")
  public String getUltimateDebtorName() {
    return ultimateDebtorName;
  }

  public void setUltimateDebtorName(String ultimateDebtorName) {
    this.ultimateDebtorName = ultimateDebtorName;
  }

  public DirectDebitSetupRequest debtorName(String debtorName) {
    this.debtorName = debtorName;
    return this;
  }

  /**
   * Debtor account owner name.
   * @return debtorName
  */
  @NotNull @Size(min = 1, max = 140) 
  @Schema(name = "debtorName", description = "Debtor account owner name.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("debtorName")
  public String getDebtorName() {
    return debtorName;
  }

  public void setDebtorName(String debtorName) {
    this.debtorName = debtorName;
  }

  public DirectDebitSetupRequest debtorAccount(CashAccount debtorAccount) {
    this.debtorAccount = debtorAccount;
    return this;
  }

  /**
   * Get debtorAccount
   * @return debtorAccount
  */
  @NotNull @Valid 
  @Schema(name = "debtorAccount", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("debtorAccount")
  public CashAccount getDebtorAccount() {
    return debtorAccount;
  }

  public void setDebtorAccount(CashAccount debtorAccount) {
    this.debtorAccount = debtorAccount;
  }

  public DirectDebitSetupRequest creditorName(String creditorName) {
    this.creditorName = creditorName;
    return this;
  }

  /**
   * Creditor account owner name.
   * @return creditorName
  */
  @NotNull @Size(min = 1, max = 140) 
  @Schema(name = "creditorName", description = "Creditor account owner name.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("creditorName")
  public String getCreditorName() {
    return creditorName;
  }

  public void setCreditorName(String creditorName) {
    this.creditorName = creditorName;
  }

  public DirectDebitSetupRequest creditorAccount(CashAccount creditorAccount) {
    this.creditorAccount = creditorAccount;
    return this;
  }

  /**
   * Get creditorAccount
   * @return creditorAccount
  */
  @NotNull @Valid 
  @Schema(name = "creditorAccount", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("creditorAccount")
  public CashAccount getCreditorAccount() {
    return creditorAccount;
  }

  public void setCreditorAccount(CashAccount creditorAccount) {
    this.creditorAccount = creditorAccount;
  }

  public DirectDebitSetupRequest debtorPrivateIdentification(String debtorPrivateIdentification) {
    this.debtorPrivateIdentification = debtorPrivateIdentification;
    return this;
  }

  /**
   * HKID number or passport number of debtor user.HKID Card: 1 or 2 chars + 6 numeric + 1 check digit char.Passport: Max 12 alphanumeric chars.Check digit validation should be performed by merchant.
   * @return debtorPrivateIdentification
  */
  @NotNull @Size(min = 1, max = 35) 
  @Schema(name = "debtorPrivateIdentification", description = "HKID number or passport number of debtor user.HKID Card: 1 or 2 chars + 6 numeric + 1 check digit char.Passport: Max 12 alphanumeric chars.Check digit validation should be performed by merchant.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("debtorPrivateIdentification")
  public String getDebtorPrivateIdentification() {
    return debtorPrivateIdentification;
  }

  public void setDebtorPrivateIdentification(String debtorPrivateIdentification) {
    this.debtorPrivateIdentification = debtorPrivateIdentification;
  }

  public DirectDebitSetupRequest debtorPrivateIdentificationSchemeName(DebtorPrivateIdentificationSchemeNameEnum debtorPrivateIdentificationSchemeName) {
    this.debtorPrivateIdentificationSchemeName = debtorPrivateIdentificationSchemeName;
    return this;
  }

  /**
   * Private ID type.
   * @return debtorPrivateIdentificationSchemeName
  */
  @NotNull @Size(max = 4) 
  @Schema(name = "debtorPrivateIdentificationSchemeName", description = "Private ID type.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("debtorPrivateIdentificationSchemeName")
  public DebtorPrivateIdentificationSchemeNameEnum getDebtorPrivateIdentificationSchemeName() {
    return debtorPrivateIdentificationSchemeName;
  }

  public void setDebtorPrivateIdentificationSchemeName(DebtorPrivateIdentificationSchemeNameEnum debtorPrivateIdentificationSchemeName) {
    this.debtorPrivateIdentificationSchemeName = debtorPrivateIdentificationSchemeName;
  }

  public DirectDebitSetupRequest debtorMobileNumber(String debtorMobileNumber) {
    this.debtorMobileNumber = debtorMobileNumber;
    return this;
  }

  /**
   * Mobile number registered in the bank. Value must be null if mobile no. not provided.
   * @return debtorMobileNumber
  */
  @Pattern(regexp = "^(\\+[0-9]{1,3}-[0-9()+-]{1,30})$") @Size(max = 35) 
  @Schema(name = "debtorMobileNumber", description = "Mobile number registered in the bank. Value must be null if mobile no. not provided.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("debtorMobileNumber")
  public String getDebtorMobileNumber() {
    return debtorMobileNumber;
  }

  public void setDebtorMobileNumber(String debtorMobileNumber) {
    this.debtorMobileNumber = debtorMobileNumber;
  }

  public DirectDebitSetupRequest maximumAmountCurrency(String maximumAmountCurrency) {
    this.maximumAmountCurrency = maximumAmountCurrency;
    return this;
  }

  /**
   * Maximum amount currency. This value must be same as credit account currency.
   * @return maximumAmountCurrency
  */
  @NotNull @Size(max = 3) 
  @Schema(name = "maximumAmountCurrency", description = "Maximum amount currency. This value must be same as credit account currency.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("maximumAmountCurrency")
  public String getMaximumAmountCurrency() {
    return maximumAmountCurrency;
  }

  public void setMaximumAmountCurrency(String maximumAmountCurrency) {
    this.maximumAmountCurrency = maximumAmountCurrency;
  }

  public DirectDebitSetupRequest maximumAmount(String maximumAmount) {
    this.maximumAmount = maximumAmount;
    return this;
  }

  /**
   * Maximum amount. No decimal point nor places for DDA limit. Set to  99999999.00 if no DDA limit.
   * @return maximumAmount
  */
  @NotNull @Pattern(regexp = "^[0-9]{1,15}(\\.[0-9]{1,2}){0,1}$") @Size(max = 18) 
  @Schema(name = "maximumAmount", description = "Maximum amount. No decimal point nor places for DDA limit. Set to  99999999.00 if no DDA limit.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("maximumAmount")
  public String getMaximumAmount() {
    return maximumAmount;
  }

  public void setMaximumAmount(String maximumAmount) {
    this.maximumAmount = maximumAmount;
  }

  public DirectDebitSetupRequest occurrences(Occurrences occurrences) {
    this.occurrences = occurrences;
    return this;
  }

  /**
   * Get occurrences
   * @return occurrences
  */
  @NotNull @Valid 
  @Schema(name = "occurrences", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("occurrences")
  public Occurrences getOccurrences() {
    return occurrences;
  }

  public void setOccurrences(Occurrences occurrences) {
    this.occurrences = occurrences;
  }

  public DirectDebitSetupRequest otpHoldIndicator(Boolean otpHoldIndicator) {
    this.otpHoldIndicator = otpHoldIndicator;
    return this;
  }

  /**
   * OTP hold indicator
   * @return otpHoldIndicator
  */
  
  @Schema(name = "otpHoldIndicator", description = "OTP hold indicator", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("otpHoldIndicator")
  public Boolean getOtpHoldIndicator() {
    return otpHoldIndicator;
  }

  public void setOtpHoldIndicator(Boolean otpHoldIndicator) {
    this.otpHoldIndicator = otpHoldIndicator;
  }

  public DirectDebitSetupRequest smsLanguageCode(SmsLanguageCodeEnum smsLanguageCode) {
    this.smsLanguageCode = smsLanguageCode;
    return this;
  }

  /**
   * User preferred language. This language will be used in SMS for communication
   * @return smsLanguageCode
  */
  @Size(max = 10) 
  @Schema(name = "smsLanguageCode", description = "User preferred language. This language will be used in SMS for communication", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("smsLanguageCode")
  public SmsLanguageCodeEnum getSmsLanguageCode() {
    return smsLanguageCode;
  }

  public void setSmsLanguageCode(SmsLanguageCodeEnum smsLanguageCode) {
    this.smsLanguageCode = smsLanguageCode;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectDebitSetupRequest directDebitSetupRequest = (DirectDebitSetupRequest) o;
    return Objects.equals(this.merchantRequestIdentification, directDebitSetupRequest.merchantRequestIdentification) &&
        Objects.equals(this.creditorReference, directDebitSetupRequest.creditorReference) &&
        Objects.equals(this.ultimateDebtorName, directDebitSetupRequest.ultimateDebtorName) &&
        Objects.equals(this.debtorName, directDebitSetupRequest.debtorName) &&
        Objects.equals(this.debtorAccount, directDebitSetupRequest.debtorAccount) &&
        Objects.equals(this.creditorName, directDebitSetupRequest.creditorName) &&
        Objects.equals(this.creditorAccount, directDebitSetupRequest.creditorAccount) &&
        Objects.equals(this.debtorPrivateIdentification, directDebitSetupRequest.debtorPrivateIdentification) &&
        Objects.equals(this.debtorPrivateIdentificationSchemeName, directDebitSetupRequest.debtorPrivateIdentificationSchemeName) &&
        Objects.equals(this.debtorMobileNumber, directDebitSetupRequest.debtorMobileNumber) &&
        Objects.equals(this.maximumAmountCurrency, directDebitSetupRequest.maximumAmountCurrency) &&
        Objects.equals(this.maximumAmount, directDebitSetupRequest.maximumAmount) &&
        Objects.equals(this.occurrences, directDebitSetupRequest.occurrences) &&
        Objects.equals(this.otpHoldIndicator, directDebitSetupRequest.otpHoldIndicator) &&
        Objects.equals(this.smsLanguageCode, directDebitSetupRequest.smsLanguageCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantRequestIdentification, creditorReference, ultimateDebtorName, debtorName, debtorAccount, creditorName, creditorAccount, debtorPrivateIdentification, debtorPrivateIdentificationSchemeName, debtorMobileNumber, maximumAmountCurrency, maximumAmount, occurrences, otpHoldIndicator, smsLanguageCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectDebitSetupRequest {\n");
    sb.append("    merchantRequestIdentification: ").append(toIndentedString(merchantRequestIdentification)).append("\n");
    sb.append("    creditorReference: ").append(toIndentedString(creditorReference)).append("\n");
    sb.append("    ultimateDebtorName: ").append(toIndentedString(ultimateDebtorName)).append("\n");
    sb.append("    debtorName: ").append(toIndentedString(debtorName)).append("\n");
    sb.append("    debtorAccount: ").append(toIndentedString(debtorAccount)).append("\n");
    sb.append("    creditorName: ").append(toIndentedString(creditorName)).append("\n");
    sb.append("    creditorAccount: ").append(toIndentedString(creditorAccount)).append("\n");
    sb.append("    debtorPrivateIdentification: ").append(toIndentedString(debtorPrivateIdentification)).append("\n");
    sb.append("    debtorPrivateIdentificationSchemeName: ").append(toIndentedString(debtorPrivateIdentificationSchemeName)).append("\n");
    sb.append("    debtorMobileNumber: ").append(toIndentedString(debtorMobileNumber)).append("\n");
    sb.append("    maximumAmountCurrency: ").append(toIndentedString(maximumAmountCurrency)).append("\n");
    sb.append("    maximumAmount: ").append(toIndentedString(maximumAmount)).append("\n");
    sb.append("    occurrences: ").append(toIndentedString(occurrences)).append("\n");
    sb.append("    otpHoldIndicator: ").append(toIndentedString(otpHoldIndicator)).append("\n");
    sb.append("    smsLanguageCode: ").append(toIndentedString(smsLanguageCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

